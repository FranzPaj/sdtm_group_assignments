
function [success] = cdm_write_OCMDB(FolderName,CDMFilename,DB,DB_index)
% =========================================================================
%
% Function to write conjunction data from the format generated using the
% "OCMDB_get_conjunctions.m" or "Alfano09_get_conjunctions.m" code to a 
% stand alone CDM text file
%
% =========================================================================
%
% INPUT:
%
%   FolderName          = Folder to which to write the resultant CDM file
%   CDMFilename         = Output filename to which to write the resultant
%                         CDM File
%   DB                  = A OCMDB data object as generated by
%                         "OCMDB_get_conjunctions.m" or 
%                         "Alfano09_get_conjunctions.m"
%   conj_index          = index of event to be written to CDM text file
%                         (the conj object may contain several different 
%                         events, hence, a specific event must be 
%                         identified for writing)
%
% OUTPUT:
%
%   success             = Boolean output indicating success(1) or failure
%                         (0) of the CDM writing process
%
% =========================================================================


    try
        % Set and Open target FilePath and Name
        file_name_parts = strsplit(CDMFilename,'.');
        
        fid = fopen(fullfile(FolderName, [file_name_parts{1} '.cdm']),'w');

        fprintf(fid, 'CCSDS_CDM_VERS                     = 1.0\n');
        fprintf(fid, 'CREATION_DATE                      = ');
        fprintf(fid, [datestr(DB(DB_index,3:8) + [0 0 0 0 0 DB(DB_index,9)/1000], 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        fprintf(fid, 'ORIGINATOR                         = JSPOC\n');
        fprintf(fid, ['MESSAGE_ID                         = ' num2str(DB(DB_index,1),'%09d') '_conj_'...
                                                              num2str(DB(DB_index,2),'%09d') '_'...
                                                              datestr(DB(DB_index,3:8) + [0 0 0 0 0 DB(DB_index,9)/1000],'yyyymmdd_HHMMSS_') ...
                                                              datestr(DB(DB_index,12:17) + [0 0 0 0 0 DB(DB_index,18)/1000],'yyyymmdd_HHMMSS') '\n']);
        fprintf(fid, 'TCA                                = ');
        fprintf(fid, [datestr(DB(DB_index,12:17) + [0 0 0 0 0 DB(DB_index,18)/1000], 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        
%         cdm_derived_parms.rel_ECI_geometry              = (DB.x1(:,DB_index)-DB.x2(:,DB_index))';
%         
%         % Get RIC rotation matrix for Object 1
%         h    = cross(DB.x1(1:3,DB_index)',DB.x1(4:6,DB_index)');
%         rhat = DB.x1(1:3,DB_index)' / norm(DB.x1(1:3,DB_index)');
%         chat = h / norm(h); ihat = cross(chat,rhat);
%         ECItoRIC = [rhat; ihat; chat];
%         ECItoRIC = [ECItoRIC zeros(3); zeros(3) ECItoRIC];
%         
%         % Create Derived Parameters Object for Writing to CDM
%         cdm_derived_parms.rel_RIC_geometry              = (ECItoRIC*cdm_derived_parms.rel_ECI_geometry')';
%         cdm_derived_parms.miss                          = norm(cdm_derived_parms.rel_ECI_geometry(1:3));
%         cdm_derived_parms.rel_speed                     = norm(cdm_derived_parms.rel_ECI_geometry(4:6));
%         cdm_derived_parms.Cov1_RIC                      = ECItoRIC*DB.C1(:,:,DB_index)*ECItoRIC';
%         
%         % Get RIC rotation matrix for Object 2
%         h    = cross(DB.x2(1:3,DB_index)',DB.x2(4:6,DB_index)');
%         rhat = DB.x2(1:3,DB_index)' / norm(DB.x2(1:3,DB_index)');
%         chat = h / norm(h); ihat = cross(chat,rhat);
%         ECItoRIC = [rhat; ihat; chat];
%         ECItoRIC = [ECItoRIC zeros(3); zeros(3) ECItoRIC];
% 
%         cdm_derived_parms.Cov2_RIC                      = ECItoRIC*DB.C2(:,:,DB_index)*ECItoRIC';
        
        fprintf(fid, ['MISS_DISTANCE                      = ' num2str(DB(DB_index,19),'%15.6f') blanks((25-length(num2str(DB(DB_index,19),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_SPEED                     = ' num2str(DB(DB_index,20),'%15.9f') blanks((25-length(num2str(DB(DB_index,20),'%15.9f')))) '[m/s]\n']);
        fprintf(fid, ['RELATIVE_POSITION_R                = ' num2str(DB(DB_index,21),'%15.6f') blanks((25-length(num2str(DB(DB_index,21),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_POSITION_T                = ' num2str(DB(DB_index,22),'%15.6f') blanks((25-length(num2str(DB(DB_index,22),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_POSITION_N                = ' num2str(DB(DB_index,23),'%15.6f') blanks((25-length(num2str(DB(DB_index,23),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_VELOCITY_R                = ' num2str(DB(DB_index,24),'%15.6f') blanks((25-length(num2str(DB(DB_index,24),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_VELOCITY_T                = ' num2str(DB(DB_index,25),'%15.6f') blanks((25-length(num2str(DB(DB_index,25),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_VELOCITY_N                = ' num2str(DB(DB_index,26),'%15.6f') blanks((25-length(num2str(DB(DB_index,26),'%15.6f')))) '[m]\n']);
        if  ~isempty(DB(DB_index,157))
            fprintf(fid, ['COMMENT HBR                        = ' num2str(DB(DB_index,157), '%2.1f') '\n']);
        end

        % Primary
        fprintf(fid,  'OBJECT                             = OBJECT1\n');
        fprintf(fid, ['OBJECT_DESIGNATOR                  = ' num2str(DB(DB_index,1),'%d') '\n']);
        fprintf(fid,  'CATALOG_NAME                       = SATCAT\n');
        fprintf(fid, ['OBJECT_NAME                        = ' num2str(DB(DB_index,1),'%d') '\n']);
        fprintf(fid, ['INTERNATIONAL_DESIGNATOR           = ' num2str(DB(DB_index,1),'%d') '\n']);
        fprintf(fid,  'EPHEMERIS_NAME                     = NONE\n');
        fprintf(fid,  'COVARIANCE_METHOD                  = CALCULATED\n');
        fprintf(fid,  'MANEUVERABLE                       = YES\n');
        fprintf(fid,  'REF_FRAME                          = EME2000\n');
        %     fprintf(fid,  'REF_FRAME                          = ITRF\n');
        fprintf(fid, ['GRAVITY_MODEL                      = EGM-96: 36D 36O\n']);
        fprintf(fid, ['ATMOSPHERIC_MODEL                  = JBH09\n']);
        fprintf(fid,  'N_BODY_PERTURBATIONS               = ');
        fprintf(fid, 'MOON,SUN\n');
        fprintf(fid,  'SOLAR_RAD_PRESSURE                 = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'EARTH_TIDES                        = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'INTRACK_THRUST                     = ');
        fprintf(fid, 'NO\n');
        fprintf(fid,  'TIME_LASTOB_START                  = ');
        if ~isempty(DB(DB_index,37))
            fprintf(fid, [datestr(datenum(DB(DB_index,37:42)), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid,  'TIME_LASTOB_END                    = ');
        if ~isempty(DB(DB_index,37))
            fprintf(fid, [datestr(datenum(DB(DB_index,37:42)), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid, ['RECOMMENDED_OD_SPAN                = ' num2str(DB(DB_index,44)) blanks((25-length(num2str(DB(DB_index,44))))) '[d]\n']);
        fprintf(fid, ['ACTUAL_OD_SPAN                     = ' num2str(DB(DB_index,45)) blanks((25-length(num2str(DB(DB_index,45))))) '[d]\n']);
        fprintf(fid, ['OBS_AVAILABLE                      = ' num2str(DB(DB_index,47)) '\n']);
        fprintf(fid, ['OBS_USED                           = ' num2str(DB(DB_index,48)) '\n']);
        fprintf(fid, ['TRACKS_AVAILABLE                   = ' num2str(DB(DB_index,49)) '\n']);
        fprintf(fid, ['TRACKS_USED                        = ' num2str(DB(DB_index,50)) '\n']);
        fprintf(fid, ['RESIDUALS_ACCEPTED                 = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[%%]\n']);
        fprintf(fid, ['WEIGHTED_RMS                       = ' num2str(DB(DB_index,55)) '\n']);
        fprintf(fid, ['COMMENT Apogee Altitude            = ' num2str(DB(DB_index,51)) '   [km]\n']);
        fprintf(fid, ['COMMENT Perigee Altitude           = ' num2str(DB(DB_index,52)) '   [km]\n']);
        fprintf(fid, ['COMMENT Inclination                = ' num2str(DB(DB_index,53)) '   [deg]\n']);
        fprintf(fid, ['AREA_PC                            = ' num2str(NaN)  blanks((25-length(num2str(NaN)))) '[m**2]\n']);
        fprintf(fid, ['CD_AREA_OVER_MASS                  = ' num2str(DB(DB_index,56),'%15.9f') blanks((25-length(num2str(DB(DB_index,56),'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['CR_AREA_OVER_MASS                  = ' num2str(DB(DB_index,57),'%15.9f') blanks((25-length(num2str(DB(DB_index,57),'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['SEDR                               = ' num2str(DB(DB_index,58)) blanks((25-length(num2str(DB(DB_index,58))))) '[W/kg]\n']);

        fprintf(fid, ['X                                  = ' num2str(DB(DB_index,67)/1000, '%15.6f') blanks((25-length(num2str(DB(DB_index,67)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Y                                  = ' num2str(DB(DB_index,68)/1000, '%15.6f') blanks((25-length(num2str(DB(DB_index,68)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Z                                  = ' num2str(DB(DB_index,69)/1000, '%15.6f') blanks((25-length(num2str(DB(DB_index,69)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['X_DOT                              = ' num2str(DB(DB_index,70)/1000, '%15.9f') blanks((25-length(num2str(DB(DB_index,70)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Y_DOT                              = ' num2str(DB(DB_index,71)/1000, '%15.9f') blanks((25-length(num2str(DB(DB_index,71)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Z_DOT                              = ' num2str(DB(DB_index,72)/1000, '%15.9f') blanks((25-length(num2str(DB(DB_index,72)/1000, '%15.9f')))) '[km/s]\n']);

        fprintf(fid, ['CR_R                               = ' num2str(DB(DB_index,73), '%22.15e') blanks((25-length(num2str(DB(DB_index,73), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CT_R                               = ' num2str(DB(DB_index,74), '%22.15e') blanks((25-length(num2str(DB(DB_index,75), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CT_T                               = ' num2str(DB(DB_index,79), '%22.15e') blanks((25-length(num2str(DB(DB_index,79), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CN_R                               = ' num2str(DB(DB_index,75), '%22.15e') blanks((25-length(num2str(DB(DB_index,75), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_T                               = ' num2str(DB(DB_index,80), '%22.15e') blanks((25-length(num2str(DB(DB_index,80), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_N                               = ' num2str(DB(DB_index,84), '%22.15e') blanks((25-length(num2str(DB(DB_index,84), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CRDOT_R                            = ' num2str(DB(DB_index,76), '%22.15e') blanks((25-length(num2str(DB(DB_index,76), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_T                            = ' num2str(DB(DB_index,81), '%22.15e') blanks((25-length(num2str(DB(DB_index,82), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_N                            = ' num2str(DB(DB_index,85), '%22.15e') blanks((25-length(num2str(DB(DB_index,85), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_RDOT                         = ' num2str(DB(DB_index,88), '%22.15e') blanks((25-length(num2str(DB(DB_index,88), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CTDOT_R                            = ' num2str(DB(DB_index,77), '%22.15e') blanks((25-length(num2str(DB(DB_index,77), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_T                            = ' num2str(DB(DB_index,82), '%22.15e') blanks((25-length(num2str(DB(DB_index,82), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_N                            = ' num2str(DB(DB_index,86), '%22.15e') blanks((25-length(num2str(DB(DB_index,86), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_RDOT                         = ' num2str(DB(DB_index,89), '%22.15e') blanks((25-length(num2str(DB(DB_index,89), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CTDOT_TDOT                         = ' num2str(DB(DB_index,91), '%22.15e') blanks((25-length(num2str(DB(DB_index,91), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CNDOT_R                            = ' num2str(DB(DB_index,78), '%22.15e') blanks((25-length(num2str(DB(DB_index,78), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_T                            = ' num2str(DB(DB_index,83), '%22.15e') blanks((25-length(num2str(DB(DB_index,83), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_N                            = ' num2str(DB(DB_index,87), '%22.15e') blanks((25-length(num2str(DB(DB_index,87), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_RDOT                         = ' num2str(DB(DB_index,90), '%22.15e') blanks((25-length(num2str(DB(DB_index,90), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_TDOT                         = ' num2str(DB(DB_index,92), '%22.15e') blanks((25-length(num2str(DB(DB_index,92), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_NDOT                         = ' num2str(DB(DB_index,93), '%22.15e') blanks((25-length(num2str(DB(DB_index,93), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CDRG_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CDRG_DRG                           = ' num2str(1e-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        fprintf(fid, ['CSRP_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_DRG                           = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**4/kg**2]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CSRP_SRP                           = ' num2str(1E-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        % Secondary
        fprintf(fid,  'OBJECT                             = OBJECT2\n');
        fprintf(fid, ['OBJECT_DESIGNATOR                  = ' num2str(DB(DB_index,2),'%d') '\n']);
        fprintf(fid,  'CATALOG_NAME                       = SATCAT\n');
        fprintf(fid, ['OBJECT_NAME                        = ' num2str(DB(DB_index,2),'%d') '\n']);
        fprintf(fid, ['INTERNATIONAL_DESIGNATOR           = ' num2str(DB(DB_index,2),'%d') '\n']);
        fprintf(fid,  'EPHEMERIS_NAME                     = NONE\n');
        fprintf(fid,  'COVARIANCE_METHOD                  = CALCULATED\n');
        fprintf(fid,  'MANEUVERABLE                       = YES\n');
        fprintf(fid,  'REF_FRAME                          = EME2000\n');
        %     fprintf(fid,  'REF_FRAME                          = ITRF\n');
        fprintf(fid, ['GRAVITY_MODEL                      = EGM-96: 36D 36O\n']);
        fprintf(fid, ['ATMOSPHERIC_MODEL                  = JBH09\n']);
        fprintf(fid,  'N_BODY_PERTURBATIONS               = ');
        fprintf(fid, 'MOON,SUN\n');
        fprintf(fid,  'SOLAR_RAD_PRESSURE                 = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'EARTH_TIDES                        = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'INTRACK_THRUST                     = ');
        fprintf(fid, 'NO\n');
        fprintf(fid,  'TIME_LASTOB_START                  = ');
        if ~isempty(DB(DB_index,37))
            fprintf(fid, [datestr(datenum(DB(DB_index,37+60:42+60)), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid,  'TIME_LASTOB_END                    = ');
        if ~isempty(DB(DB_index,37))
            fprintf(fid, [datestr(datenum(DB(DB_index,37+60:42+60)), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid, ['RECOMMENDED_OD_SPAN                = ' num2str(DB(DB_index,44+60)) blanks((25-length(num2str(DB(DB_index,44+60))))) '[d]\n']);
        fprintf(fid, ['ACTUAL_OD_SPAN                     = ' num2str(DB(DB_index,45+60)) blanks((25-length(num2str(DB(DB_index,45+60))))) '[d]\n']);
        fprintf(fid, ['OBS_AVAILABLE                      = ' num2str(DB(DB_index,47+60)) '\n']);
        fprintf(fid, ['OBS_USED                           = ' num2str(DB(DB_index,48+60)) '\n']);
        fprintf(fid, ['TRACKS_AVAILABLE                   = ' num2str(DB(DB_index,49+60)) '\n']);
        fprintf(fid, ['TRACKS_USED                        = ' num2str(DB(DB_index,50+60)) '\n']);
        fprintf(fid, ['RESIDUALS_ACCEPTED                 = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[%%]\n']);
        fprintf(fid, ['WEIGHTED_RMS                       = ' num2str(DB(DB_index,55+60)) '\n']);
        fprintf(fid, ['COMMENT Apogee Altitude            = ' num2str(DB(DB_index,51+60)) '   [km]\n']);
        fprintf(fid, ['COMMENT Perigee Altitude           = ' num2str(DB(DB_index,52+60)) '   [km]\n']);
        fprintf(fid, ['COMMENT Inclination                = ' num2str(DB(DB_index,53+60)) '   [deg]\n']);
        fprintf(fid, ['AREA_PC                            = ' num2str(NaN)  blanks((25-length(num2str(NaN)))) '[m**2]\n']);
        fprintf(fid, ['CD_AREA_OVER_MASS                  = ' num2str(DB(DB_index,56+60),'%15.9f') blanks((25-length(num2str(DB(DB_index,56+60),'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['CR_AREA_OVER_MASS                  = ' num2str(DB(DB_index,57+60),'%15.9f') blanks((25-length(num2str(DB(DB_index,57+60),'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['SEDR                               = ' num2str(DB(DB_index,58+60)) blanks((25-length(num2str(DB(DB_index,58+60))))) '[W/kg]\n']);

        fprintf(fid, ['X                                  = ' num2str(DB(DB_index,67+60)/1000, '%15.6f') blanks((25-length(num2str(DB(DB_index,67+60)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Y                                  = ' num2str(DB(DB_index,68+60)/1000, '%15.6f') blanks((25-length(num2str(DB(DB_index,68+60)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Z                                  = ' num2str(DB(DB_index,69+60)/1000, '%15.6f') blanks((25-length(num2str(DB(DB_index,69+60)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['X_DOT                              = ' num2str(DB(DB_index,70+60)/1000, '%15.9f') blanks((25-length(num2str(DB(DB_index,70+60)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Y_DOT                              = ' num2str(DB(DB_index,71+60)/1000, '%15.9f') blanks((25-length(num2str(DB(DB_index,71+60)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Z_DOT                              = ' num2str(DB(DB_index,72+60)/1000, '%15.9f') blanks((25-length(num2str(DB(DB_index,72+60)/1000, '%15.9f')))) '[km/s]\n']);

        fprintf(fid, ['CR_R                               = ' num2str(DB(DB_index,73+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,73+60), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CT_R                               = ' num2str(DB(DB_index,74+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,75+60), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CT_T                               = ' num2str(DB(DB_index,79+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,79+60), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CN_R                               = ' num2str(DB(DB_index,75+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,75+60), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_T                               = ' num2str(DB(DB_index,80+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,80+60), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_N                               = ' num2str(DB(DB_index,84+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,84+60), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CRDOT_R                            = ' num2str(DB(DB_index,76+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,76+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_T                            = ' num2str(DB(DB_index,81+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,82+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_N                            = ' num2str(DB(DB_index,85+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,85+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_RDOT                         = ' num2str(DB(DB_index,88+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,88+60), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CTDOT_R                            = ' num2str(DB(DB_index,77+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,77+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_T                            = ' num2str(DB(DB_index,82+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,82+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_N                            = ' num2str(DB(DB_index,86+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,86+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_RDOT                         = ' num2str(DB(DB_index,89+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,89+60), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CTDOT_TDOT                         = ' num2str(DB(DB_index,91+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,91+60), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CNDOT_R                            = ' num2str(DB(DB_index,78+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,78+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_T                            = ' num2str(DB(DB_index,83+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,83+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_N                            = ' num2str(DB(DB_index,87+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,87+60), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_RDOT                         = ' num2str(DB(DB_index,90+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,90+60), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_TDOT                         = ' num2str(DB(DB_index,92+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,92+60), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_NDOT                         = ' num2str(DB(DB_index,93+60), '%22.15e') blanks((25-length(num2str(DB(DB_index,93+60), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CDRG_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CDRG_DRG                           = ' num2str(1e-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        fprintf(fid, ['CSRP_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_DRG                           = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**4/kg**2]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CSRP_SRP                           = ' num2str(1E-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        fclose(fid);
        success = true;
    catch
        success = false;
%         OCMData = struct([]);
        disp('Failed to create CDM')
    end




























function [success] = cdm_write_conj_obj(FolderName,CDMFilename,conj,conj_index)
% =========================================================================
%
% Function to write conjunction data from the format generated using the
% "OCMDB_get_conjunctions.m" or "Alfano09_get_conjunctions.m" code to a 
% stand alone CDM text file
%
% =========================================================================
%
% INPUT:
%
%   FolderName          = Folder to which to write the resultant CDM file
%   CDMFilename         = Output filename to which to write the resultant
%                         CDM File
%   conj                = A conjunction data object as generated by
%                         "OCMDB_get_conjunctions.m" or 
%                         "Alfano09_get_conjunctions.m"
%   conj_index          = index of event to be written to CDM text file
%                         (the conj object may contain several different 
%                         events, hence, a specific event must be 
%                         identified for writing)
%
% OUTPUT:
%
%   success             = Boolean output indicating success(1) or failure
%                         (0) of the CDM writing process
%
% =========================================================================


    try
        % Set and Open target FilePath and Name
        file_name_parts = strsplit(CDMFilename,'.');
        
        fid = fopen(fullfile(FolderName, [file_name_parts{1} '.cdm']),'w');

        fprintf(fid, 'CCSDS_CDM_VERS                     = 1.0\n');
        fprintf(fid, 'CREATION_DATE                      = ');
        if isfield(conj,'UTCcreation') && ~isempty(conj.UTCcreation{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTCcreation{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        elseif isfield(conj,'UTC') && ~isempty(conj.UTC{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTC{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid, 'ORIGINATOR                         = JSPOC\n');
        fprintf(fid, ['MESSAGE_ID                         = ' conj.id_string{conj_index} '\n']);
        fprintf(fid, 'TCA                                = ');
        if isfield(conj,'UTC') && ~isempty(conj.UTC{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTC{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        
        cdm_derived_parms.rel_ECI_geometry              = (conj.x1(:,conj_index)-conj.x2(:,conj_index))';
        
        % Get RIC rotation matrix for Object 1
        h    = cross(conj.x1(1:3,conj_index)',conj.x1(4:6,conj_index)');
        rhat = conj.x1(1:3,conj_index)' / norm(conj.x1(1:3,conj_index)');
        chat = h / norm(h); ihat = cross(chat,rhat);
        ECItoRIC = [rhat; ihat; chat];
        ECItoRIC = [ECItoRIC zeros(3); zeros(3) ECItoRIC];
        
        % Create Derived Parameters Object for Writing to CDM
        cdm_derived_parms.rel_RIC_geometry              = (ECItoRIC*cdm_derived_parms.rel_ECI_geometry')';
        cdm_derived_parms.miss                          = norm(cdm_derived_parms.rel_ECI_geometry(1:3));
        cdm_derived_parms.rel_speed                     = norm(cdm_derived_parms.rel_ECI_geometry(4:6));
        cdm_derived_parms.Cov1_RIC                      = ECItoRIC*conj.C1(:,:,conj_index)*ECItoRIC';
        
        % Get RIC rotation matrix for Object 2
        h    = cross(conj.x2(1:3,conj_index)',conj.x2(4:6,conj_index)');
        rhat = conj.x2(1:3,conj_index)' / norm(conj.x2(1:3,conj_index)');
        chat = h / norm(h); ihat = cross(chat,rhat);
        ECItoRIC = [rhat; ihat; chat];
        ECItoRIC = [ECItoRIC zeros(3); zeros(3) ECItoRIC];

        cdm_derived_parms.Cov2_RIC                      = ECItoRIC*conj.C2(:,:,conj_index)*ECItoRIC';
        
        fprintf(fid, ['MISS_DISTANCE                      = ' num2str(cdm_derived_parms.miss,'%15.6f') blanks((25-length(num2str(cdm_derived_parms.miss,'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_SPEED                     = ' num2str(cdm_derived_parms.rel_speed,'%15.9f') blanks((25-length(num2str(cdm_derived_parms.rel_speed,'%15.9f')))) '[m/s]\n']);
        fprintf(fid, ['RELATIVE_POSITION_R                = ' num2str(cdm_derived_parms.rel_RIC_geometry(1),'%15.6f') blanks((25-length(num2str(cdm_derived_parms.rel_RIC_geometry(1),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_POSITION_T                = ' num2str(cdm_derived_parms.rel_RIC_geometry(2),'%15.6f') blanks((25-length(num2str(cdm_derived_parms.rel_RIC_geometry(2),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_POSITION_N                = ' num2str(cdm_derived_parms.rel_RIC_geometry(3),'%15.6f') blanks((25-length(num2str(cdm_derived_parms.rel_RIC_geometry(3),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_VELOCITY_R                = ' num2str(cdm_derived_parms.rel_RIC_geometry(4),'%15.6f') blanks((25-length(num2str(cdm_derived_parms.rel_RIC_geometry(4),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_VELOCITY_T                = ' num2str(cdm_derived_parms.rel_RIC_geometry(5),'%15.6f') blanks((25-length(num2str(cdm_derived_parms.rel_RIC_geometry(5),'%15.6f')))) '[m]\n']);
        fprintf(fid, ['RELATIVE_VELOCITY_N                = ' num2str(cdm_derived_parms.rel_RIC_geometry(6),'%15.6f') blanks((25-length(num2str(cdm_derived_parms.rel_RIC_geometry(6),'%15.6f')))) '[m]\n']);
        if isfield(conj,'HBR') && ~isempty(conj.HBR(conj_index))
            fprintf(fid, ['COMMENT HBR                        = ' num2str(conj.HBR(conj_index), '%2.1f') '\n']);
        end

        % Primary
        fprintf(fid,  'OBJECT                             = OBJECT1\n');
        fprintf(fid, ['OBJECT_DESIGNATOR                  = ' num2str(conj.ob1(conj_index),'%d') '\n']);
        fprintf(fid,  'CATALOG_NAME                       = SATCAT\n');
        fprintf(fid, ['OBJECT_NAME                        = ' num2str(conj.ob1(conj_index),'%d') '\n']);
        fprintf(fid, ['INTERNATIONAL_DESIGNATOR           = ' num2str(conj.ob1(conj_index),'%d') '\n']);
        fprintf(fid,  'EPHEMERIS_NAME                     = NONE\n');
        fprintf(fid,  'COVARIANCE_METHOD                  = CALCULATED\n');
        fprintf(fid,  'MANEUVERABLE                       = YES\n');
        fprintf(fid,  'REF_FRAME                          = EME2000\n');
        %     fprintf(fid,  'REF_FRAME                          = ITRF\n');
        fprintf(fid, ['GRAVITY_MODEL                      = EGM-96: 36D 36O\n']);
        fprintf(fid, ['ATMOSPHERIC_MODEL                  = JBH09\n']);
        fprintf(fid,  'N_BODY_PERTURBATIONS               = ');
        fprintf(fid, 'MOON,SUN\n');
        fprintf(fid,  'SOLAR_RAD_PRESSURE                 = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'EARTH_TIDES                        = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'INTRACK_THRUST                     = ');
        fprintf(fid, 'NO\n');
        fprintf(fid,  'TIME_LASTOB_START                  = ');
        if isfield(conj,'UTC_ObsLast1') && ~isempty(conj.UTC_ObsLast1{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTC_ObsLast1{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid,  'TIME_LASTOB_END                    = ');
        if isfield(conj,'UTC_ObsLast1') && ~isempty(conj.UTC_ObsLast1{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTC_ObsLast1{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid, ['RECOMMENDED_OD_SPAN                = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[d]\n']);
        fprintf(fid, ['ACTUAL_OD_SPAN                     = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[d]\n']);
        fprintf(fid, ['OBS_AVAILABLE                      = ' num2str(NaN) '\n']);
        fprintf(fid, ['OBS_USED                           = ' num2str(NaN) '\n']);
        fprintf(fid, ['TRACKS_AVAILABLE                   = ' num2str(NaN) '\n']);
        fprintf(fid, ['TRACKS_USED                        = ' num2str(NaN) '\n']);
        fprintf(fid, ['RESIDUALS_ACCEPTED                 = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[%%]\n']);
        fprintf(fid, ['WEIGHTED_RMS                       = ' num2str(NaN) '\n']);
        fprintf(fid, ['COMMENT Apogee Altitude            = ' num2str(conj.apo1(conj_index)) '   [km]\n']);
        fprintf(fid, ['COMMENT Perigee Altitude           = ' num2str(conj.per1(conj_index)) '   [km]\n']);
        fprintf(fid, ['COMMENT Inclination                = ' num2str(conj.inc1(conj_index)) '   [deg]\n']);
        fprintf(fid, ['AREA_PC                            = ' num2str(NaN)  blanks((25-length(num2str(NaN)))) '[m**2]\n']);
        fprintf(fid, ['CD_AREA_OVER_MASS                  = ' num2str(NaN,'%15.9f') blanks((25-length(num2str(NaN,'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['CR_AREA_OVER_MASS                  = ' num2str(NaN,'%15.9f') blanks((25-length(num2str(NaN,'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['SEDR                               = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[W/kg]\n']);

        fprintf(fid, ['X                                  = ' num2str(conj.x1(1,conj_index)/1000, '%15.6f') blanks((25-length(num2str(conj.x1(1,conj_index)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Y                                  = ' num2str(conj.x1(2,conj_index)/1000, '%15.6f') blanks((25-length(num2str(conj.x1(2,conj_index)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Z                                  = ' num2str(conj.x1(3,conj_index)/1000, '%15.6f') blanks((25-length(num2str(conj.x1(3,conj_index)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['X_DOT                              = ' num2str(conj.x1(4,conj_index)/1000, '%15.9f') blanks((25-length(num2str(conj.x1(4,conj_index)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Y_DOT                              = ' num2str(conj.x1(5,conj_index)/1000, '%15.9f') blanks((25-length(num2str(conj.x1(5,conj_index)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Z_DOT                              = ' num2str(conj.x1(6,conj_index)/1000, '%15.9f') blanks((25-length(num2str(conj.x1(6,conj_index)/1000, '%15.9f')))) '[km/s]\n']);

        fprintf(fid, ['CR_R                               = ' num2str(cdm_derived_parms.Cov1_RIC(1,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(1,1), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CT_R                               = ' num2str(cdm_derived_parms.Cov1_RIC(2,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(2,1), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CT_T                               = ' num2str(cdm_derived_parms.Cov1_RIC(2,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(2,2), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CN_R                               = ' num2str(cdm_derived_parms.Cov1_RIC(3,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(3,1), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_T                               = ' num2str(cdm_derived_parms.Cov1_RIC(3,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(3,2), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_N                               = ' num2str(cdm_derived_parms.Cov1_RIC(3,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(3,3), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CRDOT_R                            = ' num2str(cdm_derived_parms.Cov1_RIC(4,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(4,1), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_T                            = ' num2str(cdm_derived_parms.Cov1_RIC(4,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(4,2), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_N                            = ' num2str(cdm_derived_parms.Cov1_RIC(4,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(4,3), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_RDOT                         = ' num2str(cdm_derived_parms.Cov1_RIC(4,4), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(4,4), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CTDOT_R                            = ' num2str(cdm_derived_parms.Cov1_RIC(5,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(5,1), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_T                            = ' num2str(cdm_derived_parms.Cov1_RIC(5,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(5,2), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_N                            = ' num2str(cdm_derived_parms.Cov1_RIC(5,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(5,3), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_RDOT                         = ' num2str(cdm_derived_parms.Cov1_RIC(5,4), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(5,4), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CTDOT_TDOT                         = ' num2str(cdm_derived_parms.Cov1_RIC(5,5), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(5,5), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CNDOT_R                            = ' num2str(cdm_derived_parms.Cov1_RIC(6,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(6,1), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_T                            = ' num2str(cdm_derived_parms.Cov1_RIC(6,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(6,2), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_N                            = ' num2str(cdm_derived_parms.Cov1_RIC(6,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(6,3), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_RDOT                         = ' num2str(cdm_derived_parms.Cov1_RIC(6,4), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(6,4), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_TDOT                         = ' num2str(cdm_derived_parms.Cov1_RIC(6,5), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(6,5), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_NDOT                         = ' num2str(cdm_derived_parms.Cov1_RIC(6,6), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov1_RIC(6,6), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CDRG_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CDRG_DRG                           = ' num2str(1e-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        fprintf(fid, ['CSRP_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_DRG                           = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**4/kg**2]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CSRP_SRP                           = ' num2str(1E-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        % Secondary
        fprintf(fid,  'OBJECT                             = OBJECT2\n');
        fprintf(fid, ['OBJECT_DESIGNATOR                  = ' num2str(conj.ob2(conj_index),'%d') '\n']);
        fprintf(fid,  'CATALOG_NAME                       = SATCAT\n');
        fprintf(fid, ['OBJECT_NAME                        = ' num2str(conj.ob2(conj_index),'%d') '\n']);
        fprintf(fid, ['INTERNATIONAL_DESIGNATOR           = ' num2str(conj.ob2(conj_index),'%d') '\n']);
        fprintf(fid,  'EPHEMERIS_NAME                     = NONE\n');
        fprintf(fid,  'COVARIANCE_METHOD                  = CALCULATED\n');
        fprintf(fid,  'MANEUVERABLE                       = YES\n');
        fprintf(fid,  'REF_FRAME                          = EME2000\n');
        %     fprintf(fid,  'REF_FRAME                          = ITRF\n');
        fprintf(fid, ['GRAVITY_MODEL                      = EGM-96: 36D 36O\n']);
        fprintf(fid, ['ATMOSPHERIC_MODEL                  = JBH09\n']);
        fprintf(fid,  'N_BODY_PERTURBATIONS               = ');
        fprintf(fid, 'MOON,SUN\n');
        fprintf(fid,  'SOLAR_RAD_PRESSURE                 = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'EARTH_TIDES                        = ');
        fprintf(fid, 'YES\n');
        fprintf(fid,  'INTRACK_THRUST                     = ');
        fprintf(fid, 'NO\n');
        fprintf(fid,  'TIME_LASTOB_START                  = ');
        if isfield(conj,'UTC_ObsLast2') && ~isempty(conj.UTC_ObsLast2{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTC_ObsLast2{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid,  'TIME_LASTOB_END                    = ');
        if isfield(conj,'UTC_ObsLast2') && ~isempty(conj.UTC_ObsLast2{conj_index})
            fprintf(fid, [datestr(datenum(conj.UTC_ObsLast2{conj_index},'yyyy-mm-dd HH:MM:SS.FFF'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        else
            fprintf(fid, [datestr(datenum('1-1-2000'), 'yyyy-mm-ddTHH:MM:SS.FFF') '\n']);
        end
        fprintf(fid, ['RECOMMENDED_OD_SPAN                = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[d]\n']);
        fprintf(fid, ['ACTUAL_OD_SPAN                     = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[d]\n']);
        fprintf(fid, ['OBS_AVAILABLE                      = ' num2str(NaN) '\n']);
        fprintf(fid, ['OBS_USED                           = ' num2str(NaN) '\n']);
        fprintf(fid, ['TRACKS_AVAILABLE                   = ' num2str(NaN) '\n']);
        fprintf(fid, ['TRACKS_USED                        = ' num2str(NaN) '\n']);
        fprintf(fid, ['RESIDUALS_ACCEPTED                 = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[%%]\n']);
        fprintf(fid, ['WEIGHTED_RMS                       = ' num2str(NaN) '\n']);
        fprintf(fid, ['COMMENT Apogee Altitude            = ' num2str(conj.apo2(conj_index)) '   [km]\n']);
        fprintf(fid, ['COMMENT Perigee Altitude           = ' num2str(conj.per2(conj_index)) '   [km]\n']);
        fprintf(fid, ['COMMENT Inclination                = ' num2str(conj.inc2(conj_index)) '   [deg]\n']);
        fprintf(fid, ['AREA_PC                            = ' num2str(NaN)  blanks((25-length(num2str(NaN)))) '[m**2]\n']);
        fprintf(fid, ['CD_AREA_OVER_MASS                  = ' num2str(NaN,'%15.9f') blanks((25-length(num2str(NaN,'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['CR_AREA_OVER_MASS                  = ' num2str(NaN,'%15.9f') blanks((25-length(num2str(NaN,'%15.9f')))) '[m**2/kg]\n']);
        fprintf(fid, ['SEDR                               = ' num2str(NaN) blanks((25-length(num2str(NaN)))) '[W/kg]\n']);

        fprintf(fid, ['X                                  = ' num2str(conj.x2(1,conj_index)/1000, '%15.6f') blanks((25-length(num2str(conj.x2(1,conj_index)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Y                                  = ' num2str(conj.x2(2,conj_index)/1000, '%15.6f') blanks((25-length(num2str(conj.x2(2,conj_index)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['Z                                  = ' num2str(conj.x2(3,conj_index)/1000, '%15.6f') blanks((25-length(num2str(conj.x2(3,conj_index)/1000, '%15.6f')))) '[km]\n']);
        fprintf(fid, ['X_DOT                              = ' num2str(conj.x2(4,conj_index)/1000, '%15.9f') blanks((25-length(num2str(conj.x2(4,conj_index)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Y_DOT                              = ' num2str(conj.x2(5,conj_index)/1000, '%15.9f') blanks((25-length(num2str(conj.x2(5,conj_index)/1000, '%15.9f')))) '[km/s]\n']);
        fprintf(fid, ['Z_DOT                              = ' num2str(conj.x2(6,conj_index)/1000, '%15.9f') blanks((25-length(num2str(conj.x2(6,conj_index)/1000, '%15.9f')))) '[km/s]\n']);

        fprintf(fid, ['CR_R                               = ' num2str(cdm_derived_parms.Cov2_RIC(1,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(1,1), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CT_R                               = ' num2str(cdm_derived_parms.Cov2_RIC(2,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(2,1), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CT_T                               = ' num2str(cdm_derived_parms.Cov2_RIC(2,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(2,2), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CN_R                               = ' num2str(cdm_derived_parms.Cov2_RIC(3,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(3,1), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_T                               = ' num2str(cdm_derived_parms.Cov2_RIC(3,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(3,2), '%22.15e')))) '[m**2]\n']);
        fprintf(fid, ['CN_N                               = ' num2str(cdm_derived_parms.Cov2_RIC(3,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(3,3), '%22.15e')))) '[m**2]\n']);

        fprintf(fid, ['CRDOT_R                            = ' num2str(cdm_derived_parms.Cov2_RIC(4,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(4,1), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_T                            = ' num2str(cdm_derived_parms.Cov2_RIC(4,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(4,2), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_N                            = ' num2str(cdm_derived_parms.Cov2_RIC(4,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(4,3), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CRDOT_RDOT                         = ' num2str(cdm_derived_parms.Cov2_RIC(4,4), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(4,4), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CTDOT_R                            = ' num2str(cdm_derived_parms.Cov2_RIC(5,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(5,1), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_T                            = ' num2str(cdm_derived_parms.Cov2_RIC(5,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(5,2), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_N                            = ' num2str(cdm_derived_parms.Cov2_RIC(5,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(5,3), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CTDOT_RDOT                         = ' num2str(cdm_derived_parms.Cov2_RIC(5,4), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(5,4), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CTDOT_TDOT                         = ' num2str(cdm_derived_parms.Cov2_RIC(5,5), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(5,5), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CNDOT_R                            = ' num2str(cdm_derived_parms.Cov2_RIC(6,1), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(6,1), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_T                            = ' num2str(cdm_derived_parms.Cov2_RIC(6,2), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(6,2), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_N                            = ' num2str(cdm_derived_parms.Cov2_RIC(6,3), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(6,3), '%22.15e')))) '[m**2/s]\n']);
        fprintf(fid, ['CNDOT_RDOT                         = ' num2str(cdm_derived_parms.Cov2_RIC(6,4), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(6,4), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_TDOT                         = ' num2str(cdm_derived_parms.Cov2_RIC(6,5), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(6,5), '%22.15e')))) '[m**2/s**2]\n']);
        fprintf(fid, ['CNDOT_NDOT                         = ' num2str(cdm_derived_parms.Cov2_RIC(6,6), '%22.15e') blanks((25-length(num2str(cdm_derived_parms.Cov2_RIC(6,6), '%22.15e')))) '[m**2/s**2]\n']);

        fprintf(fid, ['CDRG_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CDRG_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CDRG_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CDRG_DRG                           = ' num2str(1e-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        fprintf(fid, ['CSRP_R                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_T                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_N                             = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/kg]\n']);
        fprintf(fid, ['CSRP_RDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_TDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_NDOT                          = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**3/(kg*s)]\n']);
        fprintf(fid, ['CSRP_DRG                           = ' num2str(0, '%22.15e') blanks((25-length(num2str(0, '%22.15e')))) '[m**4/kg**2]\n']);
        % Diagonal Term set to near-zero so that covariance remains
        % positive definite
        fprintf(fid, ['CSRP_SRP                           = ' num2str(1E-12, '%22.15e') blanks((25-length(num2str(1E-12, '%22.15e')))) '[m**4/kg**2]\n']);

        fclose(fid);
        success = true;
    catch
        success = false;
        OCMData = struct([]);
        disp('Failed to create CDM')
    end


























